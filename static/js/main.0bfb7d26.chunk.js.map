{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","onDeleteClick","a","async","delete","name","email","phone","contactInformation","className","onClick","style","float","bind","to","cursor","color","marginRight","Contacts","Fragment","key","Header","href","branding","defaultProps","About","match","params","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","e","newContact","post","history","push","onTextChange","target","preventDefault","EditContact","updContact","put","NotFound","Test","title","body","fetch","then","response","json","console","log","nextProps","nextState","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bfb7d26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"DELETE_CONTACT\":\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact.id !== action.payload\n        )\n      };\n    case \"ADD_CONTACT\":\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n    case \"UPDATE_CONTACT\":\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id\n            ? (contact = action.payload)\n            : contact\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    contacts: [],\n    dispatch: action => this.setState(state => reducer(state, action))\n  };\n\n  // componentDidUpdate() {\n  //   console.log(\"componentDidUpdate ...\");\n  // }\n\n  // UNSAFE_componentWillUpdate() {\n  //   console.log(\"componentWillUpdate ...\");\n  // }\n\n  async componentDidMount() {\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n    this.setState({ contacts: res.data });\n  }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport \"./Contact.css\";\nimport { Consumer } from \"../../context\";\n// import { valueToNode } from \"@babel/types\";\n\nclass Contact extends Component {\n  state = {\n    showContactInfo: false\n  };\n\n  onShowClick = () => {\n    this.setState({ showContactInfo: !this.state.showContactInfo });\n  };\n\n  // delete function\n  onDeleteClick = async (id, dispatch) => {\n    // delete request\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n      dispatch({\n        type: \"DELETE_CONTACT\",\n        payload: id\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DELETE_CONTACT\",\n        payload: id\n      });\n    }\n  };\n\n  render() {\n    const { id, name, email, phone } = this.props.contact; // distructuring\n    let contactInformation = \"\";\n\n    if (this.state.showContactInfo) {\n      contactInformation = (\n        <ul className=\"list-group\">\n          <li className=\"list-group-item\">Email: {email}</li>\n          <li className=\"list-group-item\">Phone: {phone}</li>\n        </ul>\n      );\n    } else {\n      contactInformation = \"\";\n    }\n\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                <b onClick={this.onShowClick}>\n                  {name}\n                  <i className=\"fa fa-sort-down\"></i>\n                </b>\n\n                <button\n                  style={{ float: \"right\" }}\n                  className=\"btn btn-danger btn-sm\"\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                >\n                  <i className=\"fa fa-times\"></i>\n                </button>\n                <Link to={`contact/edit/${id}`}>\n                  <i\n                    className=\"fa fa-pencil\"\n                    style={{\n                      cursor: \"pointer\",\n                      float: \"right\",\n                      color: \"black\",\n                      marginRight: \"1rem\"\n                    }}\n                  ></i>\n                </Link>\n              </h4>\n\n              {contactInformation}\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired\n};\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport Contact from \"./Contact\";\nimport { Consumer } from \"../../context\";\n\nclass Contacts extends Component {\n  //   deleteContact = id => {\n  //     const newContacts = this.state.contacts.filter(contact => {\n  //       return contact.id !== id;\n  //     });\n  //     this.setState({ contacts: newContacts });\n  //   };\n\n  render() {\n    return (\n      <Consumer>\n        {value => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-danger\">Contact</span> List\n              </h1>\n              {contacts.map(contact => (\n                <Contact key={contact.id} contact={contact} />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n\n    // const { contacts } = this.state;\n\n    // return (\n\n    // );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nfunction Header(props) {\n  //   const { branding } = props.branding;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {props.branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fa fa-home\"></i> Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fa fa-plus\"></i> Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fa fa-question\"></i> About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\nHeader.defaultProps = {\n  branding: \"My App\"\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired\n};\n\n// internal css\n// const headingStyle = {\n//   color: \"green\",\n//   fontSize: \"50px\"\n// };\n\nexport default Header;\n","import React from \"react\";\n\nexport default function About(props) {\n  return (\n    <div>\n      <h1 className=\"display-4\">{props.match.params.id}</h1>\n      {/* <h1 className=\"display-4\">Acout Contact Manager</h1> */}\n      <p className=\"lead\">Simple app to manage contacts</p>\n      <p className=\"text-secondary\">Version 1.0.0</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        className={classnames(\"form-control form-control-lg\", {\n          \"is-invalid\": error\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n  // error: PropTypes.string.isRequired\n};\n\n// set the default\nTextInputGroup.defaultProps = {\n  type: \"text\"\n};\n\nexport default TextInputGroup;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\n// import uuid from \"uuid\";\nimport axios from \"axios\";\n\nclass AddContact extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {}\n  };\n\n  onSubmit = async (dispatch, e) => {\n    const { name, email, phone } = this.state;\n\n    // Check for errors\n    if (name === \"\") {\n      this.setState({ errors: { name: \"Name is required\" } });\n      return;\n    }\n\n    if (email === \"\") {\n      this.setState({ errors: { email: \"Email is required\" } });\n      return;\n    }\n\n    if (phone === \"\") {\n      this.setState({ errors: { phone: \"Phone is required\" } });\n      return;\n    }\n\n    const newContact = {\n      name,\n      email,\n      phone\n    };\n\n    // send the request to the server\n    const res = await axios.post(\n      \"https://jsonplaceholder.typicode.com/users\",\n      newContact\n    );\n\n    dispatch({\n      type: \"ADD_CONTACT\",\n      payload: res.data\n    });\n\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      error: {}\n    });\n\n    // redirect\n    this.props.history.push(\"/\");\n  };\n\n  onTextChange = e => this.setState({ [e.target.name]: e.target.value });\n  render() {\n    const { name, email, phone, errors } = this.state;\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                <form\n                  onSubmit={e => {\n                    e.preventDefault();\n                    this.onSubmit(dispatch);\n                  }}\n                >\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Enter name\"\n                    value={name}\n                    onChange={this.onTextChange}\n                    error={errors.name}\n                  />\n\n                  <TextInputGroup\n                    label=\"Email\"\n                    type=\"email\"\n                    name=\"email\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Enter email\"\n                    value={email}\n                    onChange={this.onTextChange}\n                    error={errors.email}\n                  />\n\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onTextChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n    // return (\n\n    // );\n  }\n}\n\nexport default AddContact;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\n// import uuid from \"uuid\";\nimport axios from \"axios\";\n\nclass EditContact extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {}\n  };\n\n  // call the contact info\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    const contact = res.data;\n\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone\n    });\n  }\n\n  // submit\n  onSubmit = async (dispatch, e) => {\n    const { name, email, phone } = this.state;\n\n    // Check for errors\n    if (name === \"\") {\n      this.setState({ errors: { name: \"Name is required\" } });\n      return;\n    }\n\n    if (email === \"\") {\n      this.setState({ errors: { email: \"Email is required\" } });\n      return;\n    }\n\n    if (phone === \"\") {\n      this.setState({ errors: { phone: \"Phone is required\" } });\n      return;\n    }\n\n    const { id } = this.props.match.params;\n\n    const updContact = {\n      name,\n      email,\n      phone\n    };\n\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updContact\n    );\n\n    // update the data from the state\n    dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\n\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      error: {}\n    });\n\n    // redirect\n    this.props.history.push(\"/\");\n  };\n\n  onTextChange = e => this.setState({ [e.target.name]: e.target.value });\n  render() {\n    const { name, email, phone, errors } = this.state;\n    return (\n      <Consumer>\n        {value => {\n          const { dispatch } = value;\n\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form\n                  onSubmit={e => {\n                    e.preventDefault();\n                    this.onSubmit(dispatch);\n                  }}\n                >\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Enter name\"\n                    value={name}\n                    onChange={this.onTextChange}\n                    error={errors.name}\n                  />\n\n                  <TextInputGroup\n                    label=\"Email\"\n                    type=\"email\"\n                    name=\"email\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Enter email\"\n                    value={email}\n                    onChange={this.onTextChange}\n                    error={errors.email}\n                  />\n\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Enter Phone\"\n                    value={phone}\n                    onChange={this.onTextChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n    // return (\n\n    // );\n  }\n}\n\nexport default EditContact;\n","import React from \"react\";\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> Page Not Found\n      </h1>\n      <p className=\"lead\">Sorry, that page does not exist</p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\n\nclass Test extends Component {\n  state = {\n    title: \"\",\n    body: \"\"\n  };\n  componentDidMount() {\n    // console.log(\"ComponentDidMount...\");\n    // this is where you put all the http calls ajax here\n    fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          title: data.title,\n          body: data.body\n        })\n      );\n  }\n\n  UNSAFE_componentWillMount() {\n    console.log(\"component will mount...\");\n    // called before the commponent\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentDidUpdate ...\");\n  }\n\n  UNSAFE_componentWillUpdate() {\n    // console.log(\"componentWillUpdate ...\");\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps, nextState) {\n    // console.log(\"Component will receive props...\");\n    return null;\n  }\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <div>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    );\n  }\n}\n\nexport default Test;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Contacts from \"./components/contacts/Contacts\";\n\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\n\nimport { Provider } from \"./context\";\n\nimport \"./App.css\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport NotFound from \"./components/pages/NotFound\";\nimport Test from \"./components/test/Test\";\n// REACT ROUTER\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <Provider>\n        <Router>\n          <div className=\"AppClass\">\n            <Header branding=\"Contact Manager\" />\n\n            <div className=\"container\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about/:id\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\n// export default ;\n\n// function App() {\n//   return <div className=\"App\">HELLO hahah here</div>;\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}